// Copyright 2019 Oath Inc.
// Licensed under the terms of the Apache license. Please see LICENSE.md file distributed with this work for terms.
package com.yahoo.bard.webservice.web.apirequest.binders;

import static com.yahoo.bard.webservice.web.ErrorMessageFormat.INTEGER_INVALID;
import static com.yahoo.bard.webservice.web.ErrorMessageFormat.TOP_N_UNSORTED;

import com.yahoo.bard.webservice.druid.model.orderby.OrderByColumn;
import com.yahoo.bard.webservice.util.Incubating;
import com.yahoo.bard.webservice.web.BadApiRequestException;

import java.util.LinkedHashSet;

/**
 * Generates the topN piece of a data query.
 */
@Incubating
public interface TopNGenerator {

    /**
     * Generates the topN for this data query based on the topN parameter from the api query.
     *
     * @param topN the value of the topN parameter from an api query.
     * @return the topN to be used in the actual data query.
     */
    int generateTopN(String topN);

    /**
     * Validates that the generated topN is not erroneous.
     *
     * @param topNRequest  The topN parameter from the api request.
     * @param topN  The topN generated by {@link TopNGenerator#generateTopN(String)}.
     * @param sorts  The PARSED sorts for this query, usually generated by {@link SortGenerator}
     */
    void validateTopN(String topNRequest,  int topN, LinkedHashSet<OrderByColumn> sorts);

    /**
     * Default implementation of {@link TopNGenerator}. This generator is built to handle the base Fili API contract
     * where topN is required to be a positive number. Simply parses the topN parameter into an int, and if the result
     * is NOT a positive int an exception is thrown.
     */
    TopNGenerator DEFAULT_TOP_N_GENERATOR = new TopNGenerator() {
        @Override
        public int generateTopN(final String topN) {
            try {
                return topN == null ? 0 : Integer.parseInt(topN);
            } catch (NumberFormatException nfe) {
                throw new BadApiRequestException(INTEGER_INVALID.logFormat(topN, "topN"), nfe);
            }
        }

        @Override
        public void validateTopN(String topNRequest, int topN, LinkedHashSet<OrderByColumn> sorts) {
            // This is the validation part for topN that is inlined here because currently it is very brief.
            if (topN < 0) {
                throw new BadApiRequestException(INTEGER_INVALID.logFormat(topNRequest, "topN"));
            } else if (topN > 0 && sorts.isEmpty()) {
                throw new BadApiRequestException(TOP_N_UNSORTED.format(topNRequest));
            }
        }
    };
}
